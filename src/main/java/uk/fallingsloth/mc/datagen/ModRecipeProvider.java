package uk.fallingsloth.mc.datagen;

import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.minecraft.data.server.recipe.RecipeExporter;
import net.minecraft.data.server.recipe.ShapelessRecipeJsonBuilder;
import net.minecraft.item.Items;
import net.minecraft.recipe.book.RecipeCategory;
import net.minecraft.util.Identifier;
import uk.fallingsloth.mc.items.ModItems;

public class ModRecipeProvider extends FabricRecipeProvider
{
    public ModRecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(RecipeExporter exporter)
    {
        // ITEMS FOR KINGDOM 1
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_SWORD).input(ModItems.KINGDOM1_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_SHIELD).input(ModItems.KINGDOM1_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_BOW).input(ModItems.KINGDOM1_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_HELMET).input(ModItems.KINGDOM1_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_CHESTPLATE).input(ModItems.KINGDOM1_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_LEGGINGS).input(ModItems.KINGDOM1_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM1_BOOTS).input(ModItems.KINGDOM1_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM1_ESSENCE), conditionsFromItem(ModItems.KINGDOM1_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM1_BOOTS)));

        // ITEMS FOR KINGDOM 2
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_SWORD).input(ModItems.KINGDOM2_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_SHIELD).input(ModItems.KINGDOM2_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_BOW).input(ModItems.KINGDOM2_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_HELMET).input(ModItems.KINGDOM2_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_CHESTPLATE).input(ModItems.KINGDOM2_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_LEGGINGS).input(ModItems.KINGDOM2_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM2_BOOTS).input(ModItems.KINGDOM2_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM2_ESSENCE), conditionsFromItem(ModItems.KINGDOM2_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM2_BOOTS)));

        // ITEMS FOR KINGDOM 3
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_SWORD).input(ModItems.KINGDOM3_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_SHIELD).input(ModItems.KINGDOM3_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_BOW).input(ModItems.KINGDOM3_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_HELMET).input(ModItems.KINGDOM3_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_CHESTPLATE).input(ModItems.KINGDOM3_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_LEGGINGS).input(ModItems.KINGDOM3_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM3_BOOTS).input(ModItems.KINGDOM3_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM3_ESSENCE), conditionsFromItem(ModItems.KINGDOM3_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM3_BOOTS)));

        // ITEMS FOR KINGDOM 4
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_SWORD).input(ModItems.KINGDOM4_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_SHIELD).input(ModItems.KINGDOM4_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_BOW).input(ModItems.KINGDOM4_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_HELMET).input(ModItems.KINGDOM4_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_CHESTPLATE).input(ModItems.KINGDOM4_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_LEGGINGS).input(ModItems.KINGDOM4_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM4_BOOTS).input(ModItems.KINGDOM4_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM4_ESSENCE), conditionsFromItem(ModItems.KINGDOM4_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM4_BOOTS)));

        // ITEMS FOR KINGDOM 5
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_SWORD).input(ModItems.KINGDOM5_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_SHIELD).input(ModItems.KINGDOM5_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_BOW).input(ModItems.KINGDOM5_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_HELMET).input(ModItems.KINGDOM5_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_CHESTPLATE).input(ModItems.KINGDOM5_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_LEGGINGS).input(ModItems.KINGDOM5_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM5_BOOTS).input(ModItems.KINGDOM5_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM5_ESSENCE), conditionsFromItem(ModItems.KINGDOM5_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM5_BOOTS)));

        // ITEMS FOR KINGDOM 6
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_SWORD).input(ModItems.KINGDOM6_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_SHIELD).input(ModItems.KINGDOM6_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_BOW).input(ModItems.KINGDOM6_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_HELMET).input(ModItems.KINGDOM6_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_CHESTPLATE).input(ModItems.KINGDOM6_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_LEGGINGS).input(ModItems.KINGDOM6_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM6_BOOTS).input(ModItems.KINGDOM6_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM6_ESSENCE), conditionsFromItem(ModItems.KINGDOM6_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM6_BOOTS)));

        // ITEMS FOR KINGDOM 7
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_SWORD).input(ModItems.KINGDOM7_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_SHIELD).input(ModItems.KINGDOM7_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_BOW).input(ModItems.KINGDOM7_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_HELMET).input(ModItems.KINGDOM7_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_CHESTPLATE).input(ModItems.KINGDOM7_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_LEGGINGS).input(ModItems.KINGDOM7_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM7_BOOTS).input(ModItems.KINGDOM7_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM7_ESSENCE), conditionsFromItem(ModItems.KINGDOM7_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM7_BOOTS)));

        // ITEMS FOR KINGDOM 8
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_SWORD).input(ModItems.KINGDOM8_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_SHIELD).input(ModItems.KINGDOM8_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_BOW).input(ModItems.KINGDOM8_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_HELMET).input(ModItems.KINGDOM8_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_CHESTPLATE).input(ModItems.KINGDOM8_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_LEGGINGS).input(ModItems.KINGDOM8_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM8_BOOTS).input(ModItems.KINGDOM8_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM8_ESSENCE), conditionsFromItem(ModItems.KINGDOM8_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM8_BOOTS)));

        // ITEMS FOR KINGDOM 9
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_SWORD).input(ModItems.KINGDOM9_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_SHIELD).input(ModItems.KINGDOM9_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_BOW).input(ModItems.KINGDOM9_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_HELMET).input(ModItems.KINGDOM9_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_CHESTPLATE).input(ModItems.KINGDOM9_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_LEGGINGS).input(ModItems.KINGDOM9_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM9_BOOTS).input(ModItems.KINGDOM9_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM9_ESSENCE), conditionsFromItem(ModItems.KINGDOM9_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM9_BOOTS)));

        // ITEMS FOR KINGDOM 10
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_SWORD).input(ModItems.KINGDOM10_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_SHIELD).input(ModItems.KINGDOM10_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_BOW).input(ModItems.KINGDOM10_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_HELMET).input(ModItems.KINGDOM10_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_CHESTPLATE).input(ModItems.KINGDOM10_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_LEGGINGS).input(ModItems.KINGDOM10_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM10_BOOTS).input(ModItems.KINGDOM10_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM10_ESSENCE), conditionsFromItem(ModItems.KINGDOM10_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM10_BOOTS)));

        // ITEMS FOR KINGDOM 11
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_SWORD).input(ModItems.KINGDOM11_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_SHIELD).input(ModItems.KINGDOM11_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_BOW).input(ModItems.KINGDOM11_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_HELMET).input(ModItems.KINGDOM11_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_CHESTPLATE).input(ModItems.KINGDOM11_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_LEGGINGS).input(ModItems.KINGDOM11_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM11_BOOTS).input(ModItems.KINGDOM11_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM11_ESSENCE), conditionsFromItem(ModItems.KINGDOM11_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM11_BOOTS)));

        // ITEMS FOR KINGDOM 12
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_SWORD).input(ModItems.KINGDOM12_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_SHIELD).input(ModItems.KINGDOM12_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_BOW).input(ModItems.KINGDOM12_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_HELMET).input(ModItems.KINGDOM12_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_CHESTPLATE).input(ModItems.KINGDOM12_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_LEGGINGS).input(ModItems.KINGDOM12_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM12_BOOTS).input(ModItems.KINGDOM12_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM12_ESSENCE), conditionsFromItem(ModItems.KINGDOM12_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM12_BOOTS)));

        // ITEMS FOR KINGDOM 13
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_SWORD).input(ModItems.KINGDOM13_ESSENCE).input(Items.NETHERITE_SWORD).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_SWORD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_SHIELD).input(ModItems.KINGDOM13_ESSENCE).input(Items.SHIELD).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_SHIELD)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_BOW).input(ModItems.KINGDOM13_ESSENCE).input(Items.BOW).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_BOW)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_HELMET).input(ModItems.KINGDOM13_ESSENCE).input(Items.NETHERITE_HELMET).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_HELMET)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_CHESTPLATE).input(ModItems.KINGDOM13_ESSENCE).input(Items.NETHERITE_CHESTPLATE).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_CHESTPLATE)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_LEGGINGS).input(ModItems.KINGDOM13_ESSENCE).input(Items.NETHERITE_LEGGINGS).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_LEGGINGS)));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.KINGDOM13_BOOTS).input(ModItems.KINGDOM13_ESSENCE).input(Items.NETHERITE_BOOTS).criterion(hasItem(ModItems.KINGDOM13_ESSENCE), conditionsFromItem(ModItems.KINGDOM13_ESSENCE)).offerTo(exporter, new Identifier(getRecipeName(ModItems.KINGDOM13_BOOTS)));


    }
}
